// GoEuler Problems package - An implementation of Project Euler with Go.
// (c) 2015, Lindsay Bradford

package Problems

import (
  "fmt"
  "math"
)

type Problem2 struct {
  ProblemBase
}

func (this *Problem2) Initialise() {
  this.id = 2
  this.title = "Even Fibonacci numbers."
  this.description = " Each new term in the Fibonacci sequence is generated by adding the previous two terms. \n" + 
                     " By starting with 1 and 2, the first 10 terms will be:	\n" + 
                     " 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n" + 
                     " By considering the terms in the Fibonacci sequence whose values do not exceed four million," + 
                     " find the sum of the even-valued terms."
  this.answer = "Answer not calculated yet."                    
}

func (this *Problem2) CalculateAnswer() {
  
  var prevFibonacciNumber, currFibonacciNumber uint = 1,2

  var sumOfEvenFibonacciNumbers uint = 2 // loop only considers 3+ in the sequence, add the 2 outside the loop.

  for (currFibonacciNumber < 4000000) {
    
    // Have verified that Go deals correctly with intermediate values as desired with these multi-assignments. 
    
    prevFibonacciNumber, currFibonacciNumber = currFibonacciNumber, currFibonacciNumber + prevFibonacciNumber

    if math.Mod(float64(currFibonacciNumber),2) == 0  {
      sumOfEvenFibonacciNumbers = sumOfEvenFibonacciNumbers + currFibonacciNumber
    }
  }
  
  this.answer = fmt.Sprintf("%d", sumOfEvenFibonacciNumbers)
  this.answerVerified = true
}
