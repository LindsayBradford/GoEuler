// GoEuler Problems package - An implementation of Project Euler with Go.
// (c) 2015, Lindsay Bradford

package Problems

import (
	"fmt"
	"math"
	"log"
)

type problem2 struct {
	problemBase
}

func (p2 *problem2) Initialise(logger *log.Logger) {
	p2.logger = logger
	p2.id = 2
	p2.title = "Even Fibonacci numbers."
	p2.description = " Each new term in the Fibonacci sequence is generated by adding the previous two terms. \n" +
		" By starting with 1 and 2, the first 10 terms will be:	\n" +
		" 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n" +
		" By considering the terms in the Fibonacci sequence whose values do not exceed four million," +
		" find the sum of the even-valued terms."
	p2.answer = "Answer not calculated yet."
}

func (p2 *problem2) CalculateAnswer() {

	var prevFibonacciNumber, currFibonacciNumber uint = 1, 2

	var sumOfEvenFibonacciNumbers uint = 2 // loop only considers 3+ in the sequence, add the 2 outside the loop.

	for currFibonacciNumber < 4000000 { // while-loop

		// Have verified that Go deals correctly with intermediate values as desired with these multi-assignments.

		prevFibonacciNumber, currFibonacciNumber = currFibonacciNumber, currFibonacciNumber+prevFibonacciNumber

		if math.Mod(float64(currFibonacciNumber), 2) == 0 {
			sumOfEvenFibonacciNumbers = sumOfEvenFibonacciNumbers + currFibonacciNumber
		}
	}

	p2.answer = fmt.Sprintf("%d", sumOfEvenFibonacciNumbers)
	p2.answerVerified = true
}
